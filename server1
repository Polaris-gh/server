//socket表,能发不断开
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <signal.h>
#include <sys/wait.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <mysql/mysql.h>

#define MAXLINE 1024
#define SERV_PORT 8001

typedef struct {
    int sockfd;
    int id;
} client_socket;

void handle_client(int connfd, MYSQL *mysql_conn);
void handle_signal(int signum);
void parse_environment_data(char *data, int *light, float *temp, int *hum, int *co2);
void write_message_to_client(int sockfd, char *message, int sender_connfd);

client_socket sockets[2];
int target_connfd = -1;
pid_t client1_pid = 0;

int main(int argc, char **argv) {
    int listenfd, connfd;
    pid_t childpid;
    socklen_t clilen;
    struct sockaddr_in cliaddr, servaddr;

    // Create a socket
    listenfd = socket(AF_INET, SOCK_STREAM, 0);

    // Bind the socket to a local address and port
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(SERV_PORT);
// Bind the socket to a local address and port
if (bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
    perror("bind error");
    exit(1);
}

// Listen for incoming connections
if (listen(listenfd, 5) < 0) {
    perror("listen error");
    exit(1);
}

    // Register signal handler for child processes
    signal(SIGCHLD, handle_signal);

    // Connect to MySQL database
    MYSQL *mysql_conn;
    mysql_conn = mysql_init(NULL);
    if (mysql_conn == NULL) {
        fprintf(stderr, "Failed to initialize MySQL connection: %s\n", mysql_error(mysql_conn));
        exit(1);
    }
    if (mysql_real_connect(mysql_conn, "39.99.224.71", "root", "201968", "intelligeagri", 0, NULL, 0) == NULL) {
        fprintf(stderr, "Failed to connect to MySQL database: %s\n", mysql_error(mysql_conn));
        exit(1);
    }

    for (;;) {
        clilen = sizeof(cliaddr);
        connfd = accept(listenfd, (struct sockaddr *)&cliaddr, &clilen);

        // Fork a child process to handle the client
        if ((childpid = fork()) == 0) {
            close(listenfd);
            handle_client(connfd, mysql_conn);
            exit(0);
        }

        // Record the client's PID and socket information
        if (client1_pid == 0) {
            client1_pid = childpid;
            for (int i = 0; i < 2;i++) {
                if (sockets[i].sockfd == 0) {
                    sockets[i].sockfd = connfd;
                    sockets[i].id = 1;
                    printf("客户端%d：%d\n", sockets[i].id, sockets[i].sockfd);
                    break;
                }
            }
        } else {
            for (int i = 0; i < 2; i++) {
                if (sockets[i].sockfd == 0) {
                    sockets[i].sockfd = connfd;
                    sockets[i].id = 2;
                    printf("客户端%d：%d\n", sockets[i].id, sockets[i].sockfd);
                    break;
                }
            }
        }
    }
}

void handle_client(int connfd, MYSQL *mysql_conn) {
    ssize_t n;
    char recvline[MAXLINE];

    int light, hum, co2;
    float temp;
    char sql_query[MAXLINE];
    struct sockaddr_in addr;
    socklen_t addr_len = sizeof(addr);
    
    printf("%d已连接\n", connfd);

    // Add the's socket information to the socket table
    for (int i = 0; i < 2; i++) {
        if(sockets[i].sockfd == connfd) {
            sockets[i].id = i + 1;
            printf("客户端%d：%d\n", sockets[i].id, sockets[i].sockfd);
            break;
        }
    }

    for (;;) {
        // Read data from client
        memset(recvline, 0, MAXLINE);
        if ((n = read(connfd, recvline, MAXLINE)) == 0) {
            printf("%d断开连接\n", connfd);
            break;
        } else if (n < 0) {
            perror("read error");
            break;
        }

        printf("%d发送的数据：%s\n", connfd, recvline);

        // Handle message from Client 2
        if (connfd == sockets[0].sockfd) {
            target_connfd = sockets[1].sockfd;
        } else {
            target_connfd = sockets[0].sockfd;
        }
        if (recvline[0] == '0' && recvline[1] == 'x') {
            write_message_to_client(target_connfd, recvline, connfd);
             printf("当前值为%d\n",connfd);
            close(connfd);
            break;
        }

        // Parse environment data received from Client 1
        parse_environment_data(recvline, &light, &temp, &hum, &co2);

        // Insert environment data into database
        sprintf(sql_query, "INSERT INTO environment(Time, Temperature, Humidity, Light, CO2) VALUES(NOW(),%f,%d,%d,%d)",temp, hum, light, co2);
        if (mysql_query(mysql_conn, sql_query)) {
            fprintf(stderr, "Failed to insert data into database: %s\n",mysql_error(mysql_conn));
            break;
        }
    }
}

void handle_signal(int signum) {
    pid_t pid;
    int status;

    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        if (pid == client1_pid) {
            client1_pid = 0;
            sockets[0].sockfd = 0;
            printf("Waiting for Client 1 to connect...\n");
        } else {
            sockets[1].sockfd = 0;
            printf("Waiting for Client 2 to connect...\n");
        }
    }
}

void parse_environment_data(char *data, int *light, float *temp, int *hum, int *co2) {
    char *token;
    token = strtok(data, ",");
    *light = atoi(token);
    token = strtok(NULL, ",");
    *temp = atof(token);
    token = strtok(NULL, ",");
    *hum = atoi(token);
    token = strtok(NULL, ",");
    *co2 = atoi(token);
}

void write_message_to_client(int sockfd, char *message, int sender_connfd) {
    char sendline[MAXLINE];
    //sprintf(sendline, "Received from Client %d: %s", sender_connfd == sockets[0].sockfd ? 1 : 2, message);
    write(sockfd, message, strlen(message));
}
