//已解决
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <sys/types.h>
#include <signal.h>
#include <mysql/mysql.h>
#include <arpa/inet.h>
#include <time.h>

#define PORT 8001
#define BUFFER_SIZE 1024

void handle_client1(int client_socket, MYSQL *mysql_conn) {
    char buffer[BUFFER_SIZE] = {0};
    int read_size;
    char *lux_str = NULL;
    char *temp_str = NULL;
    char *hum_str = NULL;
    char *co2_str = NULL;
    while ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        // 解析客户端1的数据
        printf("客户端1%d发送数据：%s\n",client_socket,buffer);
       if (strncmp(buffer, "Lux:", 4) == 0) {
               char* saveptr;
        char* token = strtok_r(buffer, ", ", &saveptr);
        while (token != NULL) {
            char* key = strtok(token, ":");
            char* value = strtok(NULL, ":");
            if (key != NULL && value != NULL) {
                if (strcmp(key, "Lux") == 0) {
                    printf("Lux: %s\n", value);
                    if (lux_str != NULL) {
                        free(lux_str);
                    }
                    lux_str = strdup(value);
                } else if (strcmp(key, "Temp") == 0) {
                    printf("Temp: %s\n", value);
                    if (temp_str != NULL) {
                        free(temp_str);
                    }
                    temp_str = strdup(value);
                } else if (strcmp(key, "Hum") == 0) {
                    printf("Hum: %s\n", value);
                    if (hum_str != NULL) {
                        free(hum_str);
                    }
                    hum_str = strdup(value);
                } else if (strcmp(key, "CO2") == 0) {
                    printf("CO2: %s\n", value);
                    if (co2_str != NULL) {
                        free(co2_str);
                    }
                    co2_str = strdup(value);
                }
            }
            token = strtok_r(NULL, ", ", &saveptr);
        }
       
                // 将数据写入mysql数据库
                float temp = atof(temp_str);
                float hum = atof(hum_str);
                float lux = atof(lux_str);
                float co2 = atof(co2_str);
                char query[BUFFER_SIZE];
                sprintf(query, "INSERT INTO environment(Time, Temperature, Humidity, Light, CO2) VALUES (NOW(),%f, %f, %f, %f)", lux, temp, hum, co2);
                if (mysql_query(mysql_conn, query)) {
                    fprintf(stderr, "%s\n", mysql_error(mysql_conn));
                }
        
        }
        memset(buffer, 0, BUFFER_SIZE);
    }

    if (read_size == 0) {
        printf("Client disconnected\n");
        fflush(stdout);
    } else if (read_size == -1) {
        perror("recv failed");
    }
}

void handle_client2(int client_socket, int client1_socket) {
    char buffer[BUFFER_SIZE] = {0};
    int read_size;

   while ((read_size = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
        // 将客户端2的数据写入客户端1
        if (strncmp(buffer, "0x", 2) == 0) {
            printf("向%d发送指令:%s\n",client1_socket,buffer);
            send(client1_socket, buffer, strlen(buffer), 0);
        }
        memset(buffer, 0, BUFFER_SIZE);
    }

    if (read_size == 0) {
        printf("Client disconnected\n");
        fflush(stdout);
    } else if (read_size == -1) {
        perror("recv failed");
    }
        // 关闭客户端2的连接
    close(client_socket);
}

int main() {
    int server_fd, client1_socket, client2_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // 创建套接字
    if ((server_fd=socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // 设置套接字选项
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

       // 绑定套接字
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }

    // 监听套接字
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // 连接mysql数据库
    MYSQL *mysql_conn = mysql_init(NULL);
    if (!mysql_real_connect(mysql_conn, "39.99.224.71", "root", "201968", "intelligeagri", 0, NULL, 0)) {
        fprintf(stderr, "%s\n", mysql_error(mysql_conn));
        exit(EXIT_FAILURE);
    }

    while (1) {
        // 接受客户端1的连接
        if ((client1_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        // 创建子进程处理客户端1的连接
        pid_t pid = fork();
        if (pid == 0) {
           (server_fd);
            handle_client1(client1_socket, mysql_conn);
            exit(EXIT_SUCCESS);
        } else if (pid < 0) {
            perror("fork failed");
            exit(EXIT_FAILURE);
        }

        // 接受客户端2的连接
        if ((client2_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        // 创建子进程处理客户端2的连接
        pid = fork();
        if (pid == 0) {
            close(server_fd);
            handle_client2(client2_socket, client1_socket);
            exit(EXIT_SUCCESS);
        } else if (pid < 0) {
            perror("fork failed");
            exit(EXIT_FAILURE);
        }

        close(client1_socket);
        close(client2_socket);
    }

    mysql_close(mysql_conn);
    return 0;
}
