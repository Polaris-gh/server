#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <mysql/mysql.h>

#define PORT 8001
#define MAXLINE 1024

void handle_signal(int signum);
void handle_client(int connfd, MYSQL *mysql_conn);
void parse_environment_data(char *recvline, int *light, float *temp, int *hum, int *co2);
void write_message_to_client(int target_connfd, char *message, int connfd);

int target_connfd = -1;  // Record client 1's connection socket
pid_t client1_pid = 0;
MYSQL mysql_conn;
char mysql_user[] = "root";
char mysql_password[] = "201968";
char mysql_database[] = "intelligeagri";
char *mysql_socket = "39.99.224.71";

int main(int argc, char **argv) {
    int listenfd, connfd;
    pid_t childpid;
    socklen_t clilen;
    struct sockaddr_in cliaddr, servaddr;

    // Initialize MySQL connection
    mysql_init(&mysql_conn);
    if (!mysql_real_connect(&mysql_conn, mysql_socket, mysql_user, mysql_password, mysql_database, 0, NULL, 0)) {
        fprintf(stderr, "Failed to connect to MySQL database: %s\n", mysql_error(&mysql_conn));
        exit(1);
    }

    // Create a socket
    listenfd = socket(AF_INET, SOCK_STREAM, 0);
    if (listenfd < 0) {
        perror("socket error");
        exit(1);
    }

    // Bind the socket to the server address
    memset(&servaddr, 0, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);

    if (bind(listenfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("bind error");
        exit(1);
    }

    // Listen for incoming connections
    if (listen(listenfd, 10) < 0) {
        perror("listen error");
        exit(1);
    }

    // Set up signal handler for SIGCHLD
    signal(SIGCHLD, handle_signal);

    printf("Server started, waiting for connections...\n");

    for (;;) {
        clilen = sizeof(cliaddr);
        // Accept a new connection
        connfd = accept(listenfd, (struct sockaddr *)&cliaddr, &clilen);
        if (connfd < 0) {
            perror("accept error");
            continue;
        }

        // Fork a new process to handle the client
        if ((childpid = fork()) == 0){
            // Child process
            close(listenfd);
            if (target_connfd == -1) {
                target_connfd = connfd;  // Record client 1's connection socket
                printf("客户端1：%d\n",target_connfd);
            }
            handle_client(connfd, &mysql_conn);
            exit(0);
        } else if (childpid < 0) {
            perror("fork error");
            exit(1);
        }
        // Parent process
        if (target_connfd == -1) {
            client1_pid = childpid;  // Record client 1's PID
        }
        close(connfd);
    }

    // Close MySQL connection
    mysql_close(&mysql_conn);

    return 0;
}

// Signal handler for SIGCHLD
void handle_signal(int signum) {
    pid_t pid;
    int status;

    while ((pid = waitpid(-1, &status, WNOHANG)) > 0) {
        printf("Child process %d terminated\n", pid);
        if (pid == client1_pid) {
            printf("Client 1 disconnected\n");
            target_connfd = -1;
            client1_pid = 0;
        }
    }
}

// Handle communication with client
void handle_client(int connfd, MYSQL *mysql_conn) {
    ssize_t n;
    char recvline[MAXLINE];

    int light, hum, co2;
    float temp;
    char sql_query[MAXLINE];

    printf("%d已连接\n", connfd);

    for (;;) {
        // Read data from client
        memset(recvline, 0, MAXLINE);
        if ((n = read(connfd, recvline, MAXLINE)) == 0) {
            printf("%d断开连接\n", connfd);
            break;
        } else if (n < 0) {
            perror("read error");
            break;
        }

        printf("%d发送的数据：%s\n", connfd, recvline);
        if (recvline[0] == '0' && recvline[1] == 'x') {
            // Client 2 sends a message to Client 1
            write_message_to_client(target_connfd, "Message from Client 2", connfd);
            break;
        } else {
            // Parse environment data received from Client 1
            parse_environment_data(recvline, &light, &temp, &hum, &co2);

            // Insert environment data into database
            sprintf(sql_query, "INSERT INTO environment(Time, Temperature, Humidity, Light, CO2) VALUES(NOW(),%f,%d,%d,%d)",temp, hum, light, co2);
            if (mysql_query(mysql_conn, sql_query)) {
                fprintf(stderr, "Failed to insert data into database: %s\n",mysql_error(mysql_conn));
            }
        }
    }

    close(connfd);
}

// Parse environment data received from client
void parse_environment_data(char *recvline, int *light, float *temp, int *hum, int *co2) {
    sscanf(recvline, "%d,%f,%d,%d", light, temp, hum, co2);
}

// Write a message to a client
void write_message_to_client(int target_connfd, char *message, int connfd) {
    printf("向%d写入数据：%s\n", target_connfd, message);
    write(target_connfd, message, strlen(message));
}
